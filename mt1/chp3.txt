3.1

3.1.1

- Be able to explain the relationship between the transport and network layer
  in computer networks.
    - Transport layer is end-to-end (services for the application layer)
    - Transport layer provides logical communication between application
      processes
    - Network layer encapsulates packets from the transport layer, generally is
      very light on services (for efficiency)
    - Network layer provides logical communication between hosts
    - Transport layer is just above network layer

3.1.2

- Be able to explain the terminology associated with the Internet transport
  layer.
    - UDP = User Datagram Protocol
    - TCP = Transmission Control Protocol
    - segment = transport layer packet (sometimes UDP segments are called
      datagrams)

- Be able to explain the IP service model.
    - IP service model is best-effort
        - Makes no guarantees
    - Unreliable service

- Be able to explain the service models provided by TCP and UDP.
    - UDP
        - Process to process data delivery and error-checking
        - Unreliable service
    - TCP
        - Process to process data delivery and error-checking (like UDP)
        - Reliable data transfer (data delivered correctly and in order)
        - Congestion control

3.2

- Be able to explain the multiplexing and demultiplexing functions of a generic
  transport layer.
    - Multiplexing
        - Gathering data chunks at source host from different sockets,
          encapsulating with header information to create segments, and passing
          the segments to the network layer
    - Demultiplexing
        - Examine fields in segment to find destination socket, direct segments
          to correct socket
    - Ports 0-1023 are well-known port numbers (restricted)

- Be able to explain multiplexing and demultiplexing in the context of a
  connectionless transport like UDP.
    - UDP socket fully identified by a two-tuple consisting of a destination IP
      address and a destination port number
    - No connection information (connectionless) so source IP and host are not
      used for demultiplexing

- Be able to explain multiplexing and demultiplexing in the context of
  connection-oriented transport like TCP.
    - TCP socket identified by a four-tuple (source IP, source port, dest IP,
      dest port)
    - Two arriving TCP segments with different source IP addresses or source
      port numbers will be directed to two different sockets (except initial
      connection-establishment segments)
    - Page 194

3.3

- Be able to explain the transport services provided by UDP.
    - Process to process communication
    - Error checking (checksum)

- Be able to provide reasons why UDP's minimalist transport service is useful
  and needed.
    - Super fast
    - Finer application-level control of what/when data is sent (no congestion
      control, etc)
    - No connection establishment (fewer segments and no delay required to
      send)
    - No connection state
    - Smaller header overhead

3.3.1

- Given the UDP segment structure, be able to explain the purpose and function
  of each field.
    - Source port #:  Included as return address (IP address from IP datagram)
    - Dest port #: Destination socket (process) (IP address in IP datagram)
    - Length: header + data
    - Checksum: Error checking
    - Application Data:  obvious.

3.3.2

- Be able to explain through example how the UDP checksum is calculated and
  used in the UDP segment.
    - Sum all 16-bit words in the segment.  Take 1's complement (flip the bits)
    - At destination, add all 16-bit words to that checksum, should be all 1's
      now.  If not, there's an error

3.4

- Be able to explain how a transport protocol can provide the abstraction of a
  reliable channel over an unreliable network layer.

- Be able to use the functions associated with the unidirectional reliable
  transfer protocol depicted in Figure 3.8 to design simple reliable transport
  protocols.

3.4.1

- Be able to design and/or explain the functionality of a reliable transport
  protocol through the use of finite state machine diagrams.

- Be able to explain and use in transport protocol design the different
  mechanisms available to deal with imperfections in the network layer.

- Be able to explain, e.g., using a finite state machine, the functionality of
  a alternating-bit-protocol.

3.4.2

- Be able to explain the why stop-and-wait protocols (like the alternating bit
  protocol) is inefficient.

- Be able to explain how this inefficiency might be addressed through a
  pipelined protocol.

- Be able to explain the consequences for a transport protocol when pipelined
  functionality is implemented.

3.4.3

- Be able to explain the functionality of a go-back-N (GBN) transport protocol,
  e.g., by using an extended FSM.

- Be able to explain the sliding window mechanism used by the GBN protocol,
  e.g., by using a sender's view of the sequence number space.

3.4.4

- Be able to explain how the selective repeat (SR) protocol is an improvement
  over the GBN protocol.

- Be able to explain the sliding window mechanism used by the SR protocol,
  e.g., by showing sender and receiver views of the sequence number space.

- Be able to explain the functionality of the SR protocol, e.g., through the
  use of a ladder diagram and/or by explaining the events and resulting actions
  at both sender and receiver.

- Be able to explain why, if the window size of a protocol like SR is of the
  same magnitude as the sequence number space, it can lead to protocol
  ambiguity.

3.5

3.5.1

- Be able to explain why a connection establishment phase is useful and needed
  in TCP.

- Be able to explain the terminology and mechanisms involved with a TCP
  connection.

3.5.2

- Given the structure of a TCP segment, be able to explain the purpose and
  function of each field.

- Be able to explain the functioning of sequence numbers and acknowledgment
  numbers in TCP.

3.5.3

- Be able to explain how and why round-trip estimation is done in TCP. (Know
  the components of timeout interval and how each component is estimated.)

3.5.4

- Be able to describe the characteristics of the reliable data transfer that
  TCP provides.

- Be able to explain TCP's sender procedures in terms of timeouts, sequence
  numbers, and acknowledgements.

- Be able to explain TCP's fast retransmit mechanism and under what conditions
  it would be beneficial.

3.5.5

- Be able to explain flow-control and congestion control and why both are
  needed.

- Be able to explain how flow control is realized via the received window
  mechanism.

3.5.6

- Be able to explain the TCP connection procedure, including connection
  establishment and teardown, and how sequence numbers and acknowledgement
  numbers and flags are set.

- Be able to explain the client and server side states associated with a TCP
  connection.

- Be able to explain how a SYN flooding attack is launched and how SYN cookies
  can be used to solve the problem.

3.6

3.6.1

- Be able to explain the relationship between throughput and delay as a
  function of host sending rate for scenarios one and two.

3.6.2

- Be able to explain the two basic approaches to dealing with congestion
  control.

3.7

- Be able to explain how TCP's congestion control and flow control are two
  separate mechanisms, but are "coupled" through the amount of unacknowledged
  data that a sender may have.

- Be able to explain the relationship between the approximate sender rate, the
  congestion window and the round trip time when the amount of outstanding data
  is constrained by the congestion window.

- Be able to explain the guiding principles that govern TCPs approach to
  congestion control.

- Be able to explain the three phases of the TCP congestion-control algorithm.
  (E.g., using words and/or using a FSM.)

3.7.1

- Be able to explain why, intuitively, TCP's AIMD congestion control mechanism
  can be expected to lead to fairness when two long-lived TCP connections share
  a bottleneck link.

- Be able to explain why significant amounts of UDP traffic might be cause of
  concern with respect to the stability of the Internet as a whole.
